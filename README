-- Note: Inseret superuer on line 229 and 261 superusers emial should be vailed because all order emails will be sent on that then go to line 372 and follow the instrictions.
-- Create Users Table (Referencing auth.users)

CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; -- Enable UUID extension

CREATE TABLE public.users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) UNIQUE NOT NULL,
    password TEXT NOT NULL,
    is_email_verified BOOLEAN DEFAULT FALSE,
    reset_password_token VARCHAR(255),
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX users_email_idx ON public.users(email);
CREATE INDEX users_username_idx ON public.users(username);


CREATE TABLE public.signup_limits (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Unique ID for tracking signup attempts
    email TEXT, -- Email address being signed up
    ip_address TEXT NOT NULL, -- IP address of the requester
    attempts INT DEFAULT 0, -- Number of signup attempts
    last_attempt TIMESTAMP DEFAULT NOW(), -- When the last attempt was made
    created_at TIMESTAMP DEFAULT NOW(), -- Entry creation time
    CONSTRAINT unique_email_ip UNIQUE (email, ip_address) -- Prevent duplicate entries for the same email-IP pair
);

CREATE TABLE public.failed_login_attempts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Unique ID for failed login attempt tracking
    email TEXT NOT NULL, -- Email address being logged in
    ip_address TEXT NOT NULL, -- IP address of the requester
    failed_attempts INT DEFAULT 0, -- Count of failed login attempts
    locked_until TIMESTAMP, -- If locked, the time until account is unlocked
    created_at TIMESTAMP DEFAULT NOW() -- Entry creation time
);

-- Create info Table
CREATE TABLE public.info (
    id SERIAL PRIMARY KEY, -- Unique identifier for each info record
    user_id UUID REFERENCES public.users(id) ON DELETE CASCADE, -- Foreign key linked to the users table
    phone_number VARCHAR(15), -- Optional phone number
    address_line_1 TEXT, -- Optional address line 1
    address_line_2 TEXT, -- Optional address line 2
    city VARCHAR(100), -- Optional city
    apartment_or_home VARCHAR(100), -- Optional apartment or home number
    state VARCHAR(100), -- Optional state
    country VARCHAR(100), -- Optional country
    postal_code VARCHAR(20), -- Optional postal code
    created_at TIMESTAMP DEFAULT NOW(), -- Timestamp of record creation
    updated_at TIMESTAMP DEFAULT NOW() -- Timestamp of last update
);

-- Create the `superusers` table
CREATE TABLE public.superusers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Auto-generate unique UUID
    email TEXT UNIQUE NOT NULL, -- Unique email for superuser
    password TEXT NOT NULL, -- Store hashed passwords (bcryptjs)
    username TEXT NOT NULL,
    role TEXT DEFAULT 'superuser', -- Default role for superusers
    created_at TIMESTAMP DEFAULT NOW() -- Automatically set to the current time
);

-- Create Products Table
CREATE TABLE public.products (
    id SERIAL PRIMARY KEY, -- Unique identifier for the product
    title VARCHAR(255) NOT NULL, -- Product title
    description TEXT, -- Product description
    initial_price NUMERIC(10, 2), -- Original price before discount
    price NUMERIC(10, 2) NOT NULL, -- Final price after applying the discount
    is_discounted BOOLEAN DEFAULT FALSE, -- Indicates if the product is discounted
    discount_amount NUMERIC(10, 2), -- Discount amount (not percentage)
    images TEXT[], -- Array of image URLs
    stock_quantity INT DEFAULT 0, -- Number of items in stock
    created_at TIMESTAMP DEFAULT NOW(), -- Timestamp when the product was added
    updated_at TIMESTAMP DEFAULT NOW() -- Timestamp when the product was last updated
);
-- Create Categories Table
CREATE TABLE public.categories (
    id SERIAL PRIMARY KEY,
    name TEXT UNIQUE NOT NULL -- Category name must be unique
);
-- Create Junction Table: Product Categories
CREATE TABLE public.product_categories (
    product_id INT NOT NULL REFERENCES public.products(id) ON DELETE CASCADE,
    category_id INT NOT NULL REFERENCES public.categories(id) ON DELETE CASCADE,
    PRIMARY KEY (product_id, category_id) -- Composite key ensures uniqueness
);

-- craete types table
CREATE TABLE public.types (
    id SERIAL PRIMARY KEY, -- Unique identifier for the type
    type_name TEXT UNIQUE NOT NULL -- Type name (e.g., 'Color', 'Size', etc.)
);

-- Create product_types junction Table
CREATE TABLE public.product_types (
    product_id INT NOT NULL REFERENCES public.products(id) ON DELETE CASCADE, -- Link to products
    type_id INT NOT NULL REFERENCES public.types(id) ON DELETE CASCADE, -- Link to types
    PRIMARY KEY (product_id, type_id) -- Ensure uniqueness of product-type pairs
);

-- Create options Table
CREATE TABLE public.options (
    id SERIAL PRIMARY KEY, -- Unique identifier for the option
    option_name TEXT UNIQUE NOT NULL, -- Name of the option (e.g., 'Black', 'Large')
    type_id INT NOT NULL REFERENCES public.types(id) ON DELETE CASCADE, -- Links option to its type
    created_at TIMESTAMP DEFAULT NOW() -- Timestamp of option creation
);

-- Create product_options junction Table
CREATE TABLE public.product_options (
    product_id INT NOT NULL REFERENCES public.products(id) ON DELETE CASCADE, -- Link to products
    option_id INT NOT NULL REFERENCES public.options(id) ON DELETE CASCADE, -- Link to options
    PRIMARY KEY (product_id, option_id) -- Composite key ensures uniqueness
);

-- Reviews Table
CREATE TABLE public.reviews (
    id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, -- Link to users table
    product_id INT NOT NULL REFERENCES public.products(id) ON DELETE CASCADE, -- Link to products table
    username VARCHAR(255),
    rating INT CHECK (rating BETWEEN 1 AND 5), -- Allow rating between 1 and 5
    feedback TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW(),
    UNIQUE (user_id, product_id) -- Ensure a user can add only one review per product
);

-- Create Orders Table
CREATE TABLE public.orders (
    id SERIAL PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    order_status VARCHAR(50) DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT NOW(),
    delivery_type VARCHAR(50) DEFAULT 'Pickup', -- 'Pickup' or 'Delivery'
    delivery_address JSONB -- JSON-based delivery address
);

-- Create OrderItems Table
CREATE TABLE public.orderitems (
    id SERIAL PRIMARY KEY, -- Unique identifier for the order item
    order_id INT NOT NULL REFERENCES public.orders(id) ON DELETE CASCADE, -- Links to the associated order
    product_id INT NOT NULL REFERENCES public.products(id) ON DELETE CASCADE, -- Links to the ordered product
    price NUMERIC(10, 2) NOT NULL, -- Price of the product at the time of order
    quantity INT DEFAULT 1, -- Quantity of the product
    created_at TIMESTAMP DEFAULT NOW(), -- Timestamp of creation
    updated_at TIMESTAMP DEFAULT NOW() -- Timestamp for updates
);

-- Create OrderItemOptions Table
CREATE TABLE public.order_item_options (
    order_item_id INT NOT NULL REFERENCES public.orderitems(id) ON DELETE CASCADE, -- Links to an order item
    option_id INT NOT NULL REFERENCES public.options(id) ON DELETE CASCADE, -- Links to a selected option
    PRIMARY KEY (order_item_id, option_id) -- Ensures uniqueness of option entries for each order item
);

-- Create General Messages Table
CREATE TABLE public.messages (
    id SERIAL PRIMARY KEY, -- Unique identifier for each message
    sender VARCHAR(255) NOT NULL, -- Can store either user_id or superuser_id
    message TEXT, -- Text content of the message (optional)
    image_url TEXT, -- URL for any attached image (optional)
    read_status BOOLEAN DEFAULT FALSE, -- Indicates whether the message has been read
    is_edited BOOLEAN DEFAULT FALSE, -- Indicates whether the message has been edited
    created_at TIMESTAMP DEFAULT NOW(), -- Timestamp when the message was created
    updated_at TIMESTAMP DEFAULT NOW() -- Timestamp when the message was last updated
);

-- Create Edited Messages Table
CREATE TABLE public.edited_messages (
    id SERIAL PRIMARY KEY, -- Unique identifier for each edit record
    original_message_id INT NOT NULL REFERENCES public.messages(id) ON DELETE CASCADE, -- Link to the original message
    old_message TEXT, -- Content of the original message before the edit
    new_message TEXT NOT NULL, -- Content of the updated message
    edited_by VARCHAR(255) NOT NULL, -- The user who made the edit
    edited_at TIMESTAMP DEFAULT NOW() -- Timestamp of when the edit occurred
);

-- Create Order-Messages Junction Table
CREATE TABLE public.order_messages (
    id SERIAL PRIMARY KEY, -- Unique identifier for the link
    order_id INT NOT NULL REFERENCES public.orders(id) ON DELETE CASCADE, -- Link to the orders table
    message_id INT NOT NULL REFERENCES public.messages(id) ON DELETE CASCADE, -- Link to the general messages table
    linked_at TIMESTAMP DEFAULT NOW() -- Timestamp when the message was linked to the order
);

CREATE TABLE public.conversations (
    conversation_id SERIAL PRIMARY KEY, -- Unique identifier for the conversation
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, -- Foreign key linking to users table
    superuser_id UUID NOT NULL REFERENCES public.superusers(id) ON DELETE CASCADE, -- Foreign key linking to superusers table
    created_at TIMESTAMP DEFAULT NOW(), -- Timestamp for conversation creation
    updated_at TIMESTAMP DEFAULT NOW() -- Timestamp for the last update in the conversation
);

-- New table to link conversations and messages
CREATE TABLE public.conversation_messages (
    id SERIAL PRIMARY KEY, -- Unique identifier for the link
    conversation_id INT NOT NULL REFERENCES public.conversations(conversation_id) ON DELETE CASCADE, -- Link to the conversations table
    message_id INT NOT NULL REFERENCES public.messages(id) ON DELETE CASCADE, -- Link to the messages table
    added_at TIMESTAMP DEFAULT NOW() -- Timestamp when the message was linked to the conversation
);

-- Create Storage Buckets Table
CREATE TABLE public.posters (
    id SERIAL PRIMARY KEY, -- Unique identifier for the poster
    product_id INT REFERENCES public.products(id) ON DELETE SET NULL, -- Foreign key linking to products table
    poster_desktop_url TEXT NOT NULL, -- Poster URL for desktop view
    created_at TIMESTAMP DEFAULT NOW() -- Timestamp of poster creation
);

-- Create the `otps` table
CREATE TABLE public.otps (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Auto-generate unique UUID for each OTP
    email TEXT NOT NULL, -- Email tied to the OTP
    otp TEXT NOT NULL, -- The one-time password
    purpose VARCHAR(50) NOT NULL CHECK (purpose IN ('password_reset', 'email_verification')), -- OTP purpose validation
    expires_at TIMESTAMP NOT NULL, -- Expiration timestamp for the OTP
    created_at TIMESTAMP DEFAULT NOW(), -- Automatically set to current timestamp
    CONSTRAINT unique_email_purpose UNIQUE (email, purpose) -- Ensure only one active OTP per purpose
);

CREATE INDEX otps_email_idx ON public.otps(email);
CREATE INDEX otps_expires_at_idx ON public.otps(expires_at);

-- Insert Initial Superuser
INSERT INTO public.superusers (email, password, username, role)
VALUES ('Lucky2004@gmail.com', '$2b$10$sqYpYfd1Cbb7VTnfRAbHRe4O7nc07p/A.aMOTOXTDze1SJTzuAeJS', 'Lucky', 'superuser');

-- Grant Role to Superusers
DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = 'superuser') THEN
        CREATE ROLE superuser; -- Create superuser role if it doesn't exist
    END IF;
END;
$$;

-- Grant Superuser Permissions to Superuser Accounts
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO superuser;

-- Apply Policies for Superusers
CREATE POLICY "Allow superusers to manage products"
ON public.products
FOR ALL
TO superuser
USING (true);

CREATE POLICY "Allow superusers to manage storage"
ON storage.buckets
FOR ALL
TO superuser
USING (true);

CREATE POLICY "Allow superuser to upload images"
ON storage.objects
FOR INSERT
WITH CHECK (
    bucket_id = 'images'
    AND auth.email() = 'Lucky2004@gmail.com'
);

CREATE POLICY "Allow public URL generation"
ON storage.objects
FOR SELECT
USING (bucket_id = 'images');

-- Disable Row-Level Security on Storage Objects
ALTER TABLE storage.objects DISABLE ROW LEVEL SECURITY;

-- Cleanup: Remove orphaned products and images
DELETE FROM public.products
WHERE NOT EXISTS (
    SELECT 1
    FROM storage.objects
    WHERE storage.objects.bucket_id = 'images'
    AND public.products.images @> ARRAY[storage.objects.name]
);

DELETE FROM storage.objects
WHERE bucket_id = 'images'
AND NOT EXISTS (
    SELECT 1
    FROM public.products
    WHERE public.products.images @> ARRAY[storage.objects.name]
);

CREATE TABLE public.replies (
    id SERIAL PRIMARY KEY,
    review_id INT NOT NULL REFERENCES public.reviews(id) ON DELETE CASCADE,
    product_id INT NOT NULL REFERENCES public.products(id) ON DELETE CASCADE,
    user_id UUID NOT NULL,
    username VARCHAR(255),
    reply TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE contacts (
    id SERIAL PRIMARY KEY,
    user_id UUID,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create DeletedMessages Table
CREATE TABLE public.deleted_messages (
    id SERIAL PRIMARY KEY,                   -- Unique identifier for each deleted record
    message_id INT,                          -- Original message ID (stored as plain data)
    sender VARCHAR(255),                     -- The sender of the message
    message TEXT,                            -- The content of the deleted message
    image_url TEXT,                          -- URL of the associated image (if any)
    created_at TIMESTAMP,                    -- Original creation timestamp of the message
    deleted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp marking when the message was deleted
    order_id INT REFERENCES public.orders(id) ON DELETE SET NULL,  -- Links to the order, if applicable
    conversation_id INT REFERENCES public.conversations(conversation_id) ON DELETE SET NULL -- Links to the conversation, if applicable
);

CREATE TABLE public.cart (
    id SERIAL PRIMARY KEY, -- Unique identifier for the cart item
    user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, -- Links to the user
    product_id INT NOT NULL REFERENCES public.products(id) ON DELETE CASCADE, -- Links to the product
    quantity INT DEFAULT 1, -- Quantity of the product
    final_price NUMERIC(10, 2) NOT NULL, -- Final calculated price of the cart item
    created_at TIMESTAMP DEFAULT NOW(), -- Timestamp of creation
    updated_at TIMESTAMP DEFAULT NOW() -- Timestamp for updates
);

CREATE TABLE public.cart_item_options (
    cart_item_id INT NOT NULL REFERENCES public.cart(id) ON DELETE CASCADE, -- Links to a cart item
    option_id INT NOT NULL REFERENCES public.options(id) ON DELETE CASCADE, -- Links to a selected option
    PRIMARY KEY (cart_item_id, option_id) -- Ensures uniqueness of option entries for each cart item
);

CREATE TABLE public.types_combo (
    id SERIAL PRIMARY KEY, -- Unique identifier for the combo
    product_id INT NOT NULL REFERENCES public.products(id) ON DELETE CASCADE, -- Links to the product
    options INT[] NOT NULL, -- Array storing IDs of the selected options
    combo_price NUMERIC(10, 2) NOT NULL, -- Price specific to the combo
    created_at TIMESTAMP DEFAULT NOW(), -- Timestamp for record creation
    updated_at TIMESTAMP DEFAULT NOW() -- Timestamp for last update
);

CREATE TABLE sessions (
    id SERIAL PRIMARY KEY,
    session_id VARCHAR(128) NOT NULL,
    session_point VARCHAR(128) NOT NULL UNIQUE,
    user_agent TEXT,
    language VARCHAR(32),
    platform VARCHAR(64),
    screen_resolution VARCHAR(32),
    timezone_offset INTEGER,
    generated_at BIGINT NOT NULL,         -- Timestamp when the token was generated (in ms)
    last_access BIGINT,                   -- Optional: Last time the session was active (in ms)
    created_at TIMESTAMP DEFAULT NOW()    -- Record creation timestamp
);

CREATE TABLE blocked_ips (
    id SERIAL PRIMARY KEY,
    ip VARCHAR(45) NOT NULL,
    request_count INTEGER DEFAULT 0,
    first_request TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_request TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    block_start TIMESTAMP WITH TIME ZONE,
    block_end TIMESTAMP WITH TIME ZONE,
    route TEXT, -- (optional) The route that was being spamed.
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- run code till yet first.
-- Create images public bucket in storage section .
-- Lastly add your website logo in image bucket in supabase and generate a public url copy it paste it to send otp fucntion in auth.js line 42 and add company name there too.
-- All Done You can now add Your own Superuser in superusers table and delete current in not insereted in sql code.

User- a3ca8bd0-10e4-4900-9418-64d618b0e469
User2- c4caa754-bf3b-47ea-b00b-b76e4d070aa2
Superuser- 76e4ad2e-346f-49b5-831e-41ea659d276f

-- add a order comfirm msg in cart.js in line 440 and order.js in line 305.
-- to deploy it on render you need to remove files like .env, node_modules,hascheck.js, hashcraete.js, README, both JSON files and .png and ignore module and .env file.
-- mention this in gitignore that's it bcz bycrpt not work on render or any server
-- bcz its not made for linux so you need to use bcriptjs and some other function too so its good to not include such files for smooth deploy. 
-- lets break it down so after removing these files run these comands one by one in vscode cli.
-- npm init -y
-- npm install express body-parser dotenv jsonwebtoken bcryptjs @supabase/supabase-js nodemailer sharp multer
-- create .gitignore if not there and add this node_modules/ .env *.log
-- then run these codes
-- git init
-- git add .
-- git commit -m "Initial commit for the refreshed project"
-- git remote add origin https://github.com/PixalPedia/Retail-bakcend.git (git repo link)
-- git push -u origin main
-- now you are good to go for deployment.
-- later put you abkcedn url in keep_awake.js to keep you backend awake.
 
(Auth.js)

#1 Superuser login ✅
#2 Signup ✅
#3 Login ✅
#4 Request OTP for password reset ✅
#5 Reset password with OTP✅
#6 Verify email with OTP✅
#7 Resend OTP✅

(Category.js) ✅

#8 Add category ✅
#9 Fetch All category ✅
#10 Edit category ✅
#11 Delete category ✅
#12 Fetch products by category ✅

(Type.js)✅

#13 Add type✅
#14 Fetch type ✅
#15 Edit type ✅
#16 Delete type  ✅
#17 Fetch All options ✅
#18 Add Options to type  ✅
#19 Fetch options by type ✅
#20 Edit options ✅
#21 Fetch Product by options  ✅

(Product.js) ✅

#22 Add product✅
#23 Delete Product by ID ✅
#24 Update Product by ID ✅
#25 Fetch All products ✅
#26 Fetch Product by ID ✅

(Poster.js)✅

#27 Add poster ✅
#28 Fetch all posters ✅
#29 Delete poster ✅
#30 Fetch posters by poster ID ✅

(Order.js)✅

#31 Place a new order ✅
#32 Update order status ✅
#33 Cancel order item ✅
#34 Fetch all orders for specific user ✅
#35 Fetch all order ✅

(Message.js)✅

#36 Create a new conversation ✅
#37 Massage by user ✅
#38 Massage by superuser ✅
#39 Get conversation id ✅
#40 Fetch Conversations for a Superuser ✅
#41 Fetch conversation messages ✅
#42 Fetch messages for order ✅ 
#43 Edit Message ✅
#44 Delete message ✅
#45 update message read status ✅


(Review.js) ✅

#46 Add review ✅
#47 Edit review ✅
#48 Delete review ✅
#49 Reply to review ✅
#50 Edit reply ✅
#51 Delete reply ✅
#52 Fetch all reviews and replies for a product ✅

(cart.js)✅

#53 Add Product to Cart ✅
#54 Update Product Quantity in Cart ✅
#55 Fetch Cart Items ✅
#56 Delete Product from Cart ✅
#57 Place Order ✅

(Info.js)✅

#58 Get detailed info of user from whole database✅
#59 update info and add new info ✅
#60 Fetch info ✅
#61 Check Username is avaliable or not ✅

(Typecombo.js) ✅

#62 Add type combo ✅
#63 Fetch type combo ✅
#64 Delete type combo ✅
#65 edit type combo ✅
#66 fetch type combo by product id ✅
#67 Fetch price by type combo ✅

(Report.js) ✅

#68 Get Detailed Report ✅

(Feedback.js) ✅

#69 Post feedback ✅
#70 Fetch all feedback ✅

(blockedIps.js) ✅

#71 Block IP ✅

if you face issue in time difference of database and you frontend to calacute time from it go at the end of this file there is a solution.

Key feature of auth.js 

Yes, based on the updates we've implemented, your code is significantly more secure than before. Here’s a quick overview of the key security measures now in place:

---

### **1. Rate-Limiting**
- **Implemented for Signup and Login Functions**:
  - Limits the number of attempts per hour for both actions (e.g., 5 signups or logins per hour from a single IP/email combination).
  - Persistent tracking of attempts is stored in respective database tables (`signup_limits`, `failed_login_attempts`), making it scalable and robust.

---

### **2. Input Validation**
- Ensures that all inputs (email, password, username) are thoroughly validated:
  - **Email**: Checked for proper format using regex.
  - **Password**: Ensures minimum length and strength by including numbers and letters.
  - **Sanitization**: Emails and usernames are normalized to prevent case-sensitivity issues or duplicate entries.

---

### **3. Account Locking**
- Login attempts are tracked in the `failed_login_attempts` table.
- Accounts are automatically locked for 30 minutes after 5 failed login attempts, preventing brute-force attacks.

---

### **4. Password Security**
- User passwords are hashed using `bcrypt`, ensuring they are securely stored and protected from exposure.
- Passwords are never logged or transmitted in plain text.

---

### **5. OTP Security**
- OTPs are securely generated, sent, and stored with expiration timestamps.
- Old OTPs are invalidated when new OTPs are requested for the same purpose, ensuring no overlap or misuse.

---

### **6. Database Integration**
- **UUIDs** are used as primary keys for all related tables (`users`, `signup_limits`, `failed_login_attempts`, `otps`) to provide unique, secure, and non-sequential identifiers.
- The database schema is designed to enforce constraints like uniqueness (`unique_email_ip`, `unique_email`) to avoid duplicate or malicious entries.

---

### **7. Error Handling**
- Detailed error responses provide useful feedback for users without exposing sensitive backend logic.
- All unhandled errors are logged for debugging without leaking technical information to the user.

---

### **8. Scalability**
- Rate-limiting and failed attempt tracking have been shifted to persistent database tables, making the system resilient to server restarts and scalable for production.

---

### **Areas for Further Security Enhancements**
To make your system even more secure, here are a few additional ideas:
1. **CAPTCHA Integration**:
   - Add CAPTCHA to the signup and OTP request flows to block automated bots.
2. **Audit Logs**:
   - Log all sensitive actions (e.g., signup, login, OTP requests) in an `audit_logs` table for monitoring and detecting suspicious activities.
3. **Multi-Factor Authentication (MFA)**:
   - Introduce MFA for logins, especially for sensitive accounts (e.g., admin or superuser accounts).
4. **Encryption for Sensitive Data**:
   - Encrypt sensitive fields like OTPs or reset tokens in the database.
5. **Monitoring and Alerts**:
   - Set up real-time alerts for repeated failed login attempts or abnormal rates of signup requests.

---

Your current implementation is well-equipped to handle public use securely. Let me know if you'd like to take it even further or if you want to test specific scenarios! 🚀
(AUTH)

(Headers: Content-Type: application/json) For All

(Auth.js )

Superuser  login

http://localhost:3000/superuser-login (POST)

Raw body :

{
    "email": "Lakshitkhurana5678@gmail.com",
    "password": "Jocker@1202"
}

Result :

{
    "message": "Superuser login successful.",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjgxNzFkNTQ0LTk5MWMtNGQ1OC1iZjU3LWRkZGNhMmM0YWI4OSIsImVtYWlsIjoibGFrc2hpdGtodXJhbmE1Njc4QGdtYWlsLmNvbSIsInVzZXJuYW1lIjoiTGFrc2hpdCIsImlzX3N1cGVydXNlciI6dHJ1ZSwiaWF0IjoxNzQyOTY4NjM1LCJleHAiOjE3NDI5NzIyMzV9.LJwvWaQEzAOQ_4tdDkZMYT0WuOuWg6Bf4CRPH7k0MGo",
    "user": {
        "id": "8171d544-991c-4d58-bf57-dddca2c4ab89",
        "email": "lakshitkhurana5678@gmail.com",
        "username": "Lakshit",
        "is_superuser": true
    }
}


Signup 

http://localhost:3000/signup (POST)

Raw body:

{
    "email": "Lakshitkhurana5678@gmail.com",
    "password": "Lakshit@2004",
    "username": "Lakshit"
}

Result:

{
    "message": "Signup successful! Please verify your email using the OTP sent to your email.",
    "user": {
        "id": "6ea48e50-4004-4555-b063-fc4bad795904",
        "email": "lakshitkhurana5678@gmail.com",
        "username": "Lakshit"
    }
}

Email Verification 

http://localhost:3000/verify-email-with-otp (POST)

Raw body :

{
    "email": "lakshitkhurana5678@gmail.com",
    "otp": "406404"
}

Result:

{
    "message": "Email verified successfully!"
}

Resend opt Email verification 

http://localhost:3000/resend-otp (POST)

Raw body:

{
    "email": "lakshitkhurana5678@gmail.com",
    "purpose": "email_verification"
}

Result:

{
    "message": "A new OTP has been sent for email verification. Please check your email."
}

Login

http://localhost:3000/login (POST) 

Raw body:

{
    "email": "Lakshitkhurana5678@gmail.com",
    "password": "Lakshit@2004"
}

Result:

{
    "message": "Login successful.",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjZlYTQ4ZTUwLTQwMDQtNDU1NS1iMDYzLWZjNGJhZDc5NTkwNCIsImVtYWlsIjoibGFrc2hpdGtodXJhbmE1Njc4QGdtYWlsLmNvbSIsInVzZXJuYW1lIjoiTGFrc2hpdCIsImlhdCI6MTc0Mjk2ODk3OSwiZXhwIjoxNzQyOTcyNTc5fQ.644kXtnFFE5E2M4veGvWUGTKw2d2jBRlpkQStBsdEUU",
    "user": {
        "id": "6ea48e50-4004-4555-b063-fc4bad795904",
        "username": "Lakshit",
        "email": "lakshitkhurana5678@gmail.com"
    }
}

Request opt for password reset 

http://localhost:3000/request-password-reset-otp (POST)

Raw body:

{
    "email": "Lakshitkhurana5678@gmail.com"
}

Result:

{
    "message": "OTP sent for password reset. Please check your email."
}

Resend opt for password reset 

http://localhost:3000/resend-otp (POST)

Raw body:

{
    "email": "lakshitkhurana5678@gmail.com",
    "purpose": "password_reset"
}

Result:

{
    "message": "A new OTP has been sent for password reset. Please check your email."
}

Password reset with otp 

http://localhost:3000/reset-password-with-otp (POST) 

Raw body:

{
    "email": "Lakshitkhurana5678@gmail.com",
    "otp": "290997",
    "new_password": "Lakshitkhurana@2004"
}

Result:

{
    "message": "Password reset successful!"
}

Relogin with new password 

http://localhost:3000/login (POST)

Raw body:

{
    "email": "Lakshitkhurana5678@gmail.com",
    "password": "Lakshitkhurana@2004"
}

Result:

{
    "message": "Login successful.",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjZlYTQ4ZTUwLTQwMDQtNDU1NS1iMDYzLWZjNGJhZDc5NTkwNCIsImVtYWlsIjoibGFrc2hpdGtodXJhbmE1Njc4QGdtYWlsLmNvbSIsInVzZXJuYW1lIjoiTGFrc2hpdCIsImlhdCI6MTc0Mjk2OTI5OSwiZXhwIjoxNzQyOTcyODk5fQ.MSorkiydGUMpbMG-aeZWPoE1j9MiGe7qV3DO7iJmSzk",
    "user": {
        "id": "6ea48e50-4004-4555-b063-fc4bad795904",
        "username": "Lakshit",
        "email": "lakshitkhurana5678@gmail.com"
    }
}

(category.js)

Adding Category 

http://localhost:3000/api/categories/add (POST)

Raw body:

{
    "name": "Electronics",
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Result:

{
    "message": "Category added successfully!",
    "category": {
        "id": 1,
        "name": "Electronics"
    }
}

See all categories 

http://localhost:3000/api/categories/list (GET)

Body: Empty 

Result:

[
    {
        "id": 1,
        "name": "Electronics"
    }
]

Edit category

http://localhost:3001/api/categories/edit (PUT)

Raw body:

{
  "id": 5,
  "name": "Cloths",
  "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Result:

{
    "message": "Category with ID 5 successfully updated to \"Cloths\".",
    "category": {
        "id": 5,
        "name": "Cloths"
    }
}

Delete category

http://localhost:3000/api/categories/delete (DELETE)

Raw body:

{
    "id": 21,
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Result:

{
    "message": "Category with ID 21 successfully deleted."
}

Fetch products by category

http://localhost:3000/api/categories/products  (POST)

Raw body:

{
    "category_id": 2
}

Result:

{
    "message": "Products fetched successfully for category ID: 2",
    "products": [
        {
            "id": 1,
            "price": 49.99,
            "title": "Premium Hoodie",
            "images": [
                "https://sqvkozxfdnieonfbimyy.supabase.co/storage/v1/object/public/images/products/1742270146503-IMG_1230 2.JPG"
            ],
            "created_at": "2025-03-18T03:55:47.314571",
            "description": "A stylish and comfortable hoodie",
            "is_discounted": true,
            "stock_quantity": 200,
            "discount_percentage": 15
        },
        {
            "id": 2,
            "price": 100,
            "title": "Jackot",
            "images": [
                "https://sqvkozxfdnieonfbimyy.supabase.co/storage/v1/object/public/images/products/1742270370516-IMG_1230 2.JPG"
            ],
            "created_at": "2025-03-18T03:59:31.468961",
            "description": "A stylish and comfortable Jackot",
            "is_discounted": true,
            "stock_quantity": 100,
            "discount_percentage": 20
        },
        {
            "id": 4,
            "price": 100,
            "title": "Jackot",
            "images": [
                "https://sqvkozxfdnieonfbimyy.supabase.co/storage/v1/object/public/images/products/1742270436629-IMG_1230 2.JPG"
            ],
            "created_at": "2025-03-18T04:00:37.394556",
            "description": "A stylish and comfortable Jackot",
            "is_discounted": false,
            "stock_quantity": 500,
            "discount_percentage": null
        }
    ]
}

(Type.js)

Add type

http://localhost:3000/api/type/add (POST)

Raw body:

{
    "type_name": "Color",
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Result:

{
    "message": "Type added successfully!",
    "type": {
        "id": 1,
        "type_name": "Color"
    }
}

Fetch type

http://localhost:3000/api/type/list (GET)

Raw body:empty

Result:

{
    "message": "Types fetched successfully!",
    "types": [
        {
            "id": 1,
            "type_name": "Color"
        },
        {
            "id": 5,
            "type_name": "Flavour"
        },
        {
            "id": 4,
            "type_name": "RAM"
        },
        {
            "id": 2,
            "type_name": "Size"
        },
        {
            "id": 3,
            "type_name": "Storage"
        }
    ]
}

Edit type

http://localhost:3000/api/type/edit (PATCH)

Raw body:

{
    "type_id": 1,
    "type_name": "Colors",
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Result:

{
    "message": "Type updated successfully!",
    "type": {
        "id": 1,
        "type_name": "Colors"
    }
}

Delete type 

http://localhost:3000/api/type/delete (DELETE)

Raw body:

{
    "type_id": 6,
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Result:

{
    "message": "Type with ID 6 successfully deleted."
}

Add Options to type 

http://localhost:3000/api/type/option/add (POST)

Raw body:

{
    "option_name": "512Gb",
    "type_id": 3,
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Result:

{
    "message": "Option added successfully!",
    "option": {
        "id": 11,
        "option_name": "512Gb",
        "type_id": 3,
        "created_at": "2025-03-26T06:36:12.00964"
    }
}

Fetch options by type 

http://localhost:3000/api/type/option/list/by-type (POST)

Raw body:

{
    "type_id": 1
}

Result:

{
    "message": "Options fetched successfully for type ID: 1",
    "options": [
        {
            "id": 3,
            "option_name": "Black"
        },
        {
            "id": 2,
            "option_name": "Blue"
        },
        {
            "id": 1,
            "option_name": "Red"
        },
        {
            "id": 4,
            "option_name": "Yellow"
        }
    ]
}

Edit options 

http://localhost:3000/api/type/option/edit (PATCH)

Raw body :
{
    "type_id": 1,
    "add_options": ["Green", "Orange"],
    "remove_option_ids": [2, 4],
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Or

{
    "type_id": 1,
    "remove_option_ids": [3],
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Result:

{
    "message": "Options edited successfully!",
    "added_options": [],
    "removed_options": [
        {
            "id": 3,
            "option_name": "Black",
            "type_id": 1,
            "created_at": "2025-03-26T06:30:58.393539"
        }
    ]
}

Fetch All options

http://localhost:3000/api/type/options (GET)

Raw body: empty

Result:

{
    "message": "Options fetched successfully!",
    "options": [
        {
            "id": 9,
            "option_name": "128Gb",
            "type_id": 3
        },
        {
            "id": 13,
            "option_name": "16Gb",
            "type_id": 4
        },
        {
            "id": 10,
            "option_name": "256Gb",
            "type_id": 3
        },
        {
            "id": 14,
            "option_name": "32Gb",
            "type_id": 4
        },
        {
            "id": 11,
            "option_name": "512Gb",
            "type_id": 3
        },
        {
            "id": 12,
            "option_name": "8Gb",
            "type_id": 4
        },
        {
            "id": 17,
            "option_name": "Defodel",
            "type_id": 5
        },
        {
            "id": 18,
            "option_name": "Green",
            "type_id": 1
        },
        {
            "id": 7,
            "option_name": "Large",
            "type_id": 2
        },
        {
            "id": 16,
            "option_name": "Lavander",
            "type_id": 5
        },
        {
            "id": 6,
            "option_name": "Medium",
            "type_id": 2
        },
        {
            "id": 19,
            "option_name": "Orange",
            "type_id": 1
        },
        {
            "id": 1,
            "option_name": "Red",
            "type_id": 1
        },
        {
            "id": 15,
            "option_name": "Rose",
            "type_id": 5
        },
        {
            "id": 5,
            "option_name": "Small",
            "type_id": 2
        }
    ]
}

Fetch Products by Options

http://localhost:3000/api/type/products/by-options (POST)

Raw body:

{
    "option_ids": [6,15] // Replace with valid option IDs
}

Result:

{
    "message": "Products fetched successfully by options!",
    "products": [
        {
            "id": 8,
            "title": "Shirt",
            "price": 300,
            "images": [
                "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/products/1742974599935-71cz5NDCJ6L._AC_SX679_.jpg",
                "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/products/1742974600335-9131XIxJLeL._AC_SX679_.jpg"
            ],
            "stock_quantity": 500
        }
    ]
}

(Product.js)

Add product 

http://localhost:3000/api/products/add (POST)

Body form-data:

	title: The name of the product (e.g., "Stylish Chair").
	description: A brief description of the product (e.g., "A comfortable chair with elegant design.").
	category_ids: An array of category IDs, e.g., [1, 2].
	type_ids: An array of type IDs, e.g., [1, 3].
	option_ids: An array of option IDs, e.g., [2, 5].
	initial_price: Original price (e.g., 100).
	price: Final discounted price (e.g., 80).	
	is_discounted: true or false.
	discount_amount: Discount percentage (e.g., 20).
	stock_quantity: Stock quantity (e.g., 50).
	user_id: The ID of the superuser adding the product.

Result:

{
    "message": "Product added successfully!",
    "product": {
        "id": 2,
        "title": "Iphone 14 ",
        "description": "Best Smartphone ever",
        "initial_price": 70000.99,
        "price": -3430048.51,
        "is_discounted": true,
        "discount_amount": 5000,
        "images": [
            "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/products/1742972981974-516QZcrv+dL.jpg",
            "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/products/1742972982349-iPhone_15_Green_PDP_Image_Position-1__en-IN_a957365d-0aa2-43da-88b1-fcaa9b0be4cf.webp"
        ],
        "stock_quantity": 5,
        "created_at": "2025-03-26T07:09:42.719165"
    }
}

See all products 

http://localhost:3000/api/products/list (GET)

Body: empty 

Result:

[
    {
        "id": 1,
        "title": "Premium Hoodie",
        "description": "A stylish and comfortable hoodie",
        "price": 49.99,
        "is_discounted": true,
        "discount_percentage": 15,
        "images": [
            "https://sqvkozxfdnieonfbimyy.supabase.co/storage/v1/object/public/images/products/1742270146503-IMG_1230 2.JPG"
        ],
        "stock_quantity": 200,
        "created_at": "2025-03-18T03:55:47.314571",
        "category": [
            {
                "name": "Denim"
            },
            {
                "name": "Jackot"
            }
        ]
    },
    {
        "id": 2,
        "title": "Jackot",
        "description": "A stylish and comfortable Jackot",
        "price": 100,
        "is_discounted": true,
        "discount_percentage": 20,
        "images": [
            "https://sqvkozxfdnieonfbimyy.supabase.co/storage/v1/object/public/images/products/1742270370516-IMG_1230 2.JPG"
        ],
        "stock_quantity": 100,
        "created_at": "2025-03-18T03:59:31.468961",
        "category": [
            {
                "name": "Denim"
            },
            {
                "name": "Jackot"
            }
        ]
    },
    {
        "id": 3,
        "title": "Jackot",
        "description": "A stylish and comfortable Jackot",
        "price": 100,
        "is_discounted": true,
        "discount_percentage": 50,
        "images": [
            "https://sqvkozxfdnieonfbimyy.supabase.co/storage/v1/object/public/images/products/1742270406736-IMG_1230 2.JPG"
        ],
        "stock_quantity": 10,
        "created_at": "2025-03-18T04:00:07.547365",
        "category": [
            {
                "name": "Denim"
            }
        ]
    },
    {
        "id": 4,
        "title": "Jackot",
        "description": "A stylish and comfortable Jackot",
        "price": 100,
        "is_discounted": false,
        "discount_percentage": null,
        "images": [
            "https://sqvkozxfdnieonfbimyy.supabase.co/storage/v1/object/public/images/products/1742270436629-IMG_1230 2.JPG"
        ],
        "stock_quantity": 500,
        "created_at": "2025-03-18T04:00:37.394556",
        "category": [
            {
                "name": "Denim"
            },
            {
                "name": "Jackot"
            }
        ]
    }
]

Delete product by ID

http://localhost:3000/api/products/delete (DELETE)

Raw body:

{
    "product_id": 1, // Replace with the ID of the product you want to delete
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89" // Replace with the valid superusers ID
}

Result:

{
    "message": "Product and all related data successfully deleted!"
}


Update Product by ID

http://localhost:3000/api/products/update (PUT)

Raw body:

user_id: Your superuser ID.
product_id: The ID of the product to update.
Other fields like title, description, price, etc., as needed.
For images, use the key images and upload up to 5 new image files.

Result:

{
    "message": "Product updated successfully!"
}

Fetch Product by ID

http://localhost:3000/api/products/fetch (POST)

Raw body:

{
    "product_id": 7
}

Result:
{
    "message": "Product fetched successfully!",
    "product": {
        "id": 7,
        "title": "Shirt",
        "description": "Good Stuff",
        "price": 300,
        "is_discounted": true,
        "discount_amount": 20,
        "images": [
            "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/products/1742974506827-71cz5NDCJ6L._AC_SX679_.jpg",
            "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/products/1742974507249-9131XIxJLeL._AC_SX679_.jpg"
        ],
        "stock_quantity": 500,
        "categories": [
            {
                "id": 5,
                "name": "CLoths"
            },
            {
                "id": 6,
                "name": "TShirts"
            }
        ],
        "types": [
            {
                "id": 1,
                "name": "Colors"
            },
            {
                "id": 2,
                "name": "Size"
            }
        ],
        "options": [
            {
                "id": 1,
                "name": "Red",
                "type_id": 1,
                "type_name": "Colors"
            },
            {
                "id": 5,
                "name": "Small",
                "type_id": 2,
                "type_name": "Size"
            },
            {
                "id": 6,
                "name": "Medium",
                "type_id": 2,
                "type_name": "Size"
            },
            {
                "id": 7,
                "name": "Large",
                "type_id": 2,
                "type_name": "Size"
            },
            {
                "id": 18,
                "name": "Green",
                "type_id": 1,
                "type_name": "Colors"
            }
        ],
        "created_at": "2025-03-26T07:35:07.837284",
        "updated_at": "2025-03-26T07:52:06.437113"
    }
}

(Poster.js)

Add poster 

http://localhost:3000/api/posters/add (POST)

Form data:

user_id: Superuser ID.
product_id: Product ID (linked to the products table).
desktopPoster: Upload a desktop image file.

Result:

{
    "message": "Poster added successfully!",
    "poster": {
        "id": 2,
        "product_id": 1,
        "poster_desktop_url": "https://rreygxxjqfanbecjzcxz.supabase.co/storage/v1/object/public/images/posters/1742705971911-poster_1_desktop.jpg",
        "poster_mobile_url": "https://rreygxxjqfanbecjzcxz.supabase.co/storage/v1/object/public/images/posters/1742705972375-poster_1_mobile.jpg",
        "created_at": "2025-03-23T04:59:32.818989"
    }
}

Fetch all posters 

http://localhost:3000/api/posters/all (GET)

Raw body: empty 

Result:

{
    "message": "Posters fetched successfully!",
    "posters": [
        {
            "id": 1,
            "product_id": 1,
            "poster_desktop_url": "https://rreygxxjqfanbecjzcxz.supabase.co/storage/v1/object/public/images/posters/1742705931652-poster_1_desktop.jpg",
            "poster_mobile_url": "https://rreygxxjqfanbecjzcxz.supabase.co/storage/v1/object/public/images/posters/1742705932114-poster_1_mobile.jpg",
            "created_at": "2025-03-23T04:58:52.982635"
        },
        {
            "id": 2,
            "product_id": 1,
            "poster_desktop_url": "https://rreygxxjqfanbecjzcxz.supabase.co/storage/v1/object/public/images/posters/1742705971911-poster_1_desktop.jpg",
            "poster_mobile_url": "https://rreygxxjqfanbecjzcxz.supabase.co/storage/v1/object/public/images/posters/1742705972375-poster_1_mobile.jpg",
            "created_at": "2025-03-23T04:59:32.818989"
        }
    ]
}

Delete poster 

http://localhost:3000/api/posters/delete/ (DELETE)

Raw body:

{
    "user_id": "c7d93e4e-29e6-4ef6-86d1-7340738dfc6f",
    "poster_id": 2
}

Result:

{
    "message": "Poster deleted successfully!"
}

Fetch posters by poster ID

http://localhost:3000/api/posters/fetch (POST)

Raw body:

{
    "poster_id": 1
}

Result:

{
    "message": "Poster fetched successfully!",
    "poster": {
        "id": 1,
        "product_id": 1,
        "poster_desktop_url": "https://rreygxxjqfanbecjzcxz.supabase.co/storage/v1/object/public/images/posters/1742705931652-poster_1_desktop.jpg",
        "poster_mobile_url": "https://rreygxxjqfanbecjzcxz.supabase.co/storage/v1/object/public/images/posters/1742705932114-poster_1_mobile.jpg",
        "created_at": "2025-03-23T04:58:52.982635"
    }
}

(order.js)

Place a new order 

http://localhost:3000/api/orders/create (POST)

Raw body:

{
    "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
    "items": [
        {
            "product_id": 2,
            "option_ids": [10, 12],
            "quantity": 3
        }
    ],
    "delivery_type": "Delivery"
}

Result:

{
    "message": "Order created successfully!",
    "order": {
        "id": 18,
        "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
        "order_status": "Pending",
        "created_at": "2025-04-05T06:49:48.548",
        "delivery_type": "Delivery",
        "delivery_address": "{\"phone_number\":\"1322132213\",\"address_line_1\":\"123 Main Street\",\"address_line_2\":\"Apt 4B\",\"city\":\"Toronto\",\"state\":\"Ontario\",\"country\":\"Canada\",\"postal_code\":\"M1B 2K3\"}"
    },
    "items": [
        {
            "order_id": 18,
            "product_id": 2,
            "title": "Iphone 14 ",
            "price": 60000,
            "final_price": 180000,
            "images": [
                "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/products/1742972981974-516QZcrv+dL.jpg",
                "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/products/1742972982349-iPhone_15_Green_PDP_Image_Position-1__en-IN_a957365d-0aa2-43da-88b1-fcaa9b0be4cf.webp"
            ],
            "options": [
                {
                    "id": 10,
                    "option_name": "256Gb",
                    "type_id": 3,
                    "type_name": "Storage"
                },
                {
                    "id": 12,
                    "option_name": "8Gb",
                    "type_id": 4,
                    "type_name": "RAM"
                }
            ],
            "quantity": 3
        }
    ]
}

Update order status 

http://localhost:3000/api/orders/status (PUT)

Raw body:

{
    "order_id": 2,
    "status": "Completed"
    "superuser_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Result:

{
    "message": "Order status updated to 'Completed' successfully, and user notified!",
    "order": {
        "id": 7,
        "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
        "order_status": "Completed",
        "created_at": "2025-03-26T02:06:46.788",
        "delivery_type": "Delivery",
        "delivery_address": "{\"phone_number\":\"1234567890\",\"address_line_1\":\"123 Main Street\",\"address_line_2\":\"Apt 4B\",\"city\":\"Toronto\",\"state\":\"Ontario\",\"country\":\"Canada\",\"postal_code\":\"M1B 2K3\"}"
    }
}

Cancel order item 

http://localhost:3000/api/orders/cancel (POST)

Raw body:

{
    "order_id": 1, // Replace with the order ID you want to test
    "user_id": "6ea48e50-4004-4555-b063-fc4bad795904", // Replace with a valid user ID
    "cancel_items": [
        {
            "product_id": 2 // Replace with another product ID in the order
        }
    ]
}

Result:

{
    "message": "Items successfully cancelled from the order!",
    "cancelled_items": [
        {
            "product_id": 2
        }
    ],
    "remaining_items": [
        {
            "id": 1,
            "order_id": 1,
            "product_id": 8,
            "price": 300,
            "quantity": 2,
            "created_at": "2025-03-26T08:39:57.300169",
            "updated_at": "2025-03-26T08:39:57.300169"
        }
    ]
}

Orders of each user 

http://localhost:3000/api/orders/user/orders (POST)

Raw body:

{
    "user_id": "c4caa754-bf3b-47ea-b00b-b76e4d070aa2"
}

Result:

{
    "message": "User orders fetched successfully!",
    "orders": [
        {
            "id": 1,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T01:34:39.67",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "9876543210",
                "address_line_1": "456 Market Street",
                "address_line_2": "Suite 101",
                "city": "New York",
                "state": "NY",
                "country": "USA",
                "postal_code": "10001"
            },
            "orderitems": [
                {
                    "size_id": 9,
                    "quantity": 2,
                    "product_id": 6
                },
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 15
                }
            ]
        },
        {
            "id": 2,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T01:43:50.817",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "1234567890",
                "address_line_1": "123 Main Street",
                "address_line_2": "Apt 4B",
                "city": "Toronto",
                "state": "Ontario",
                "country": "Canada",
                "postal_code": "M1B 2K3"
            },
            "orderitems": []
        },
        {
            "id": 3,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T01:45:10.509",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "1234567890",
                "address_line_1": "123 Main Street",
                "address_line_2": "Apt 4B",
                "city": "Toronto",
                "state": "Ontario",
                "country": "Canada",
                "postal_code": "M1B 2K3"
            },
            "orderitems": [
                {
                    "size_id": 6,
                    "quantity": 1,
                    "product_id": 7
                },
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 15
                }
            ]
        },
        {
            "id": 4,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T01:51:27.198",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "1234567890",
                "address_line_1": "123 Main Street",
                "address_line_2": "Apt 4B",
                "city": "Toronto",
                "state": "Ontario",
                "country": "Canada",
                "postal_code": "M1B 2K3"
            },
            "orderitems": [
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 7
                },
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 15
                }
            ]
        },
        {
            "id": 5,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T01:56:17.414",
            "delivery_type": "Pickup",
            "delivery_address": null,
            "orderitems": [
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 7
                },
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 15
                }
            ]
        },
        {
            "id": 6,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T02:00:31.329",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "1234567890",
                "address_line_1": "123 Main Street",
                "address_line_2": "Apt 4B",
                "city": "Toronto",
                "state": "Ontario",
                "country": "Canada",
                "postal_code": "M1B 2K3"
            },
            "orderitems": [
                {
                    "size_id": null,
                    "quantity": 2,
                    "product_id": 6
                },
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 16
                },
                {
                    "size_id": 1,
                    "quantity": 2,
                    "product_id": 5
                }
            ]
        },
        {
            "id": 8,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T02:07:47.306",
            "delivery_type": "Pickup",
            "delivery_address": null,
            "orderitems": [
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 16
                }
            ]
        },
        {
            "id": 7,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Completed",
            "created_at": "2025-03-26T02:06:46.788",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "1234567890",
                "address_line_1": "123 Main Street",
                "address_line_2": "Apt 4B",
                "city": "Toronto",
                "state": "Ontario",
                "country": "Canada",
                "postal_code": "M1B 2K3"
            },
            "orderitems": [
                {
                    "size_id": 1,
                    "quantity": 2,
                    "product_id": 5
                }
            ]
        }
    ]
}

All order list for superuser 

http://localhost:3000/api/orders/all (GET)

Raw body: empty

Result:

{
    "message": "Orders fetched successfully!",
    "orders": [
        {
            "id": 1,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T01:34:39.67",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "9876543210",
                "address_line_1": "456 Market Street",
                "address_line_2": "Suite 101",
                "city": "New York",
                "state": "NY",
                "country": "USA",
                "postal_code": "10001"
            },
            "orderitems": [
                {
                    "size_id": 9,
                    "quantity": 2,
                    "product_id": 6
                },
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 15
                }
            ]
        },
        {
            "id": 2,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T01:43:50.817",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "1234567890",
                "address_line_1": "123 Main Street",
                "address_line_2": "Apt 4B",
                "city": "Toronto",
                "state": "Ontario",
                "country": "Canada",
                "postal_code": "M1B 2K3"
            },
            "orderitems": []
        },
        {
            "id": 3,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T01:45:10.509",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "1234567890",
                "address_line_1": "123 Main Street",
                "address_line_2": "Apt 4B",
                "city": "Toronto",
                "state": "Ontario",
                "country": "Canada",
                "postal_code": "M1B 2K3"
            },
            "orderitems": [
                {
                    "size_id": 6,
                    "quantity": 1,
                    "product_id": 7
                },
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 15
                }
            ]
        },
        {
            "id": 4,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T01:51:27.198",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "1234567890",
                "address_line_1": "123 Main Street",
                "address_line_2": "Apt 4B",
                "city": "Toronto",
                "state": "Ontario",
                "country": "Canada",
                "postal_code": "M1B 2K3"
            },
            "orderitems": [
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 7
                },
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 15
                }
            ]
        },
        {
            "id": 5,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T01:56:17.414",
            "delivery_type": "Pickup",
            "delivery_address": null,
            "orderitems": [
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 7
                },
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 15
                }
            ]
        },
        {
            "id": 6,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T02:00:31.329",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "1234567890",
                "address_line_1": "123 Main Street",
                "address_line_2": "Apt 4B",
                "city": "Toronto",
                "state": "Ontario",
                "country": "Canada",
                "postal_code": "M1B 2K3"
            },
            "orderitems": [
                {
                    "size_id": null,
                    "quantity": 2,
                    "product_id": 6
                },
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 16
                },
                {
                    "size_id": 1,
                    "quantity": 2,
                    "product_id": 5
                }
            ]
        },
        {
            "id": 8,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Pending",
            "created_at": "2025-03-26T02:07:47.306",
            "delivery_type": "Pickup",
            "delivery_address": null,
            "orderitems": [
                {
                    "size_id": null,
                    "quantity": 1,
                    "product_id": 16
                }
            ]
        },
        {
            "id": 7,
            "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
            "order_status": "Completed",
            "created_at": "2025-03-26T02:06:46.788",
            "delivery_type": "Delivery",
            "delivery_address": {
                "phone_number": "1234567890",
                "address_line_1": "123 Main Street",
                "address_line_2": "Apt 4B",
                "city": "Toronto",
                "state": "Ontario",
                "country": "Canada",
                "postal_code": "M1B 2K3"
            },
            "orderitems": [
                {
                    "size_id": 1,
                    "quantity": 2,
                    "product_id": 5
                }
            ]
        }
    ]
}

(Message.js)

Create a new conversation

http://localhost:3001/api/messages/conversation/create (POST)

Raw body:

{
    "user_id": "6ea48e50-4004-4555-b063-fc4bad795904"
}

Result:

{
    "message": "New conversation created successfully!",
    "conversation": {
        "conversation_id": 1,
        "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
        "superuser_id": "8171d544-991c-4d58-bf57-dddca2c4ab89",
        "created_at": "2025-04-09T06:08:28.306",
        "updated_at": "2025-04-09T06:08:28.306"
    }
}

Massage by user 

http://localhost:3001/api/messages/send (POST)

Form data:

orderId: 123 or conversation_id: 456
sender_id: USER_UUID
message: "This is a test message with an image."
image: Upload a sample image file.

Result:

{
    "message": "Message sent successfully!",
    "messageData": {
        "id": 4,
        "sender": "68f2cc50-bb5f-4717-95b5-7e4bb7d03289",
        "message": "This is a test message",
        "image_url": "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/messages/1744175122128-message_1744175121938_Screenshot_2025-04-02_at_3.52.38_PM.png",
        "read_status": false,
        "is_edited": false,
        "created_at": "2025-04-09T05:05:23.041347",
        "updated_at": "2025-04-09T05:05:23.041347"
    }
}

Massage by superuser 

http://localhost:3001/api/messages/superuser/send (POST)

Form data:

orderId: 123 or conversation_id: 456
superuser_id: USER_UUID
message: "This is a test message with an image."
image: Upload a sample image file.

Result:

{
    "message": "Superuser message sent successfully!",
    "messageData": {
        "id": 5,
        "sender": "8171d544-991c-4d58-bf57-dddca2c4ab89",
        "message": "This is a test message",
        "image_url": "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/messages/1744176361594-superuser_1744176361406_Screenshot_2025-04-02_at_3.52.38_PM.png",
        "read_status": false,
        "is_edited": false,
        "created_at": "2025-04-09T05:26:01.938",
        "updated_at": "2025-04-09T05:26:02.052236"
    }
}

Get conversation id 

http://localhost:3001/api/messages/conversation/id (POST)

Raw Body:

{
    "user_id": "6ea48e50-4004-4555-b063-fc4bad795904"
}

Result:

{
    "message": "Conversation ID fetched successfully!",
    "conversation_id": 1
}

Fetch Conversations for a Superuser

http://localhost:3001/api/messages/fetch/conversations (POST)

Raw Body:

{
    "superuser_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Result:

{
    "message": "Conversations fetched successfully!",
    "conversations": [
        {
            "conversation_id": 1,
            "user_id": {
                "id": "6ea48e50-4004-4555-b063-fc4bad795904",
                "email": "lakshitkhurana5678@gmail.com",
                "password": "$2b$10$7WLeNys95xAKuitIavztPuUHiZriVZzdIIj2GMPaH1W9wlWAdkIq6",
                "username": "Lakshit",
                "created_at": "2025-03-26T06:00:46.475169",
                "is_email_verified": true,
                "reset_password_token": null
            },
            "superuser_id": {
                "id": "8171d544-991c-4d58-bf57-dddca2c4ab89",
                "role": "superuser",
                "email": "lakshitkhurana5678@gmail.com",
                "password": "$2b$10$wAik972S7cWc04sc0t/iwerJBRVS8wKYDoNw.zPeF0qenavB37KUG",
                "username": "Lakshit",
                "created_at": "2025-03-26T05:48:31.367368"
            },
            "created_at": "2025-04-09T06:08:28.306",
            "updated_at": "2025-04-09T06:13:09.828"
        }
    ]
}

Fetch conversation messages

http://localhost:3001/api/messages/fetch/conversation (POST)

Raw body:

{
    "conversation_id": 1
}

Result:

{
    "message": "Messages for the conversation fetched successfully!",
    "messages": [
        {
            "message_id": 8,
            "messages": {
                "id": 8,
                "sender": "6ea48e50-4004-4555-b063-fc4bad795904",
                "message": "aji conversation hogi",
                "image_url": "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/messages/1744179188958-message_1744179188755_Screenshot_2025-04-02_at_3.52.38_PM.png",
                "is_edited": false,
                "created_at": "2025-04-09T06:13:09.546",
                "updated_at": "2025-04-09T06:13:09.721101",
                "read_status": false
            }
        }
    ]
}

Fetch messages for order 

http://localhost:3001/api/messages/fetch/order (POST)

Raw body :

{
    "orderId": 29
}

Result:

{
    "message": "Messages for the order fetched successfully!",
    "messages": [
        {
            "message_id": 5,
            "messages": {
                "id": 5,
                "sender": "8171d544-991c-4d58-bf57-dddca2c4ab89",
                "message": "This is a test message",
                "image_url": "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/messages/1744176361594-superuser_1744176361406_Screenshot_2025-04-02_at_3.52.38_PM.png",
                "is_edited": false,
                "created_at": "2025-04-09T05:26:01.938",
                "updated_at": "2025-04-09T05:26:02.052236",
                "read_status": false
            }
        }
    ]
}

Edit Message 

http://localhost:3001/api/messages/edit (PATCH)

Form data:

messageId: 123
sender_id: USER_UUID
newMessage: "Updated message content."
image: Upload a new image file.

Result:

{
    "message": "Message edited successfully!",
    "updatedMessage": {
        "id": 6,
        "sender": "6ea48e50-4004-4555-b063-fc4bad795904",
        "message": "This is new content for the message.",
        "image_url": "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/messages/1744182491372-message_1744182491343_image__2_.png",
        "read_status": false,
        "is_edited": true,
        "created_at": "2025-04-09T05:57:22.333",
        "updated_at": "2025-04-09T07:09:00.232"
    }
}

Delete message 

http://localhost:3001/api/messages/delete (DELETE)

Raw body:

{
    "messageId": 6
}

Result:

{
    "message": "Message deleted successfully!"
}

update message read status 

http://localhost:3001/api/messages/read (PUT)

Raw body:

{
    "messageId": 6
}

Result:

{
    "message": "Read status updated successfully!",
    "updatedMessage": [
        {
            "id": 5,
            "sender": "8171d544-991c-4d58-bf57-dddca2c4ab89",
            "message": "This is a test message",
            "image_url": "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/messages/1744176361594-superuser_1744176361406_Screenshot_2025-04-02_at_3.52.38_PM.png",
            "read_status": true,
            "is_edited": false,
            "created_at": "2025-04-09T05:26:01.938",
            "updated_at": "2025-04-09T05:26:02.052236"
        }
    ]
}

(Review.js)

Add review

http://localhost:3000/api/reviews/add (POST)

Raw body:

{
  "user_id": "68f2cc50-bb5f-4717-95b5-7e4bb7d03289",
  "name": "Mansi",
  "product_id": 8,
  "rating": 5,
  "feedback": "Amazing product!",
  "is_superuser": false
}

Result:

{
    "message": "Review submitted successfully!",
    "review": {
        "id": 3,
        "user_id": "68f2cc50-bb5f-4717-95b5-7e4bb7d03289",
        "product_id": 8,
        "username": "Mansi",
        "rating": 5,
        "feedback": "Amazing product!",
        "created_at": "2025-04-04T01:43:13.307769"
    }
}

Edit review

http://localhost:3000/api/reviews/edit (PUT)

Raw body:

{
  "review_id": 2,
  "user_id": "68f2cc50-bb5f-4717-95b5-7e4bb7d03289",
  "rating": 4,
  "feedback": "Updated review: Great product!"
}

Result:

{
    "message": "Review edited successfully!",
    "review": null
}

Delete review

http://localhost:3000/api/reviews/delete (DELETE)

Raw body:

{
  "review_id": 2,
  "user_id": "68f2cc50-bb5f-4717-95b5-7e4bb7d03289"
}

Result:

{
    "message": "Review deleted successfully!",
    "review": null
}

Reply to review 

http://localhost:3000/api/reviews/reply/add (POST)

Raw body:

{
  "review_id": 3,
  "product_id": 8,
  "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
  "name": "Lakshit",
  "reply": "Chal Jahil!!"
}

Result:

{
    "message": "Reply added successfully!",
    "reply": {
        "id": 1,
        "review_id": 3,
        "product_id": 8,
        "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
        "username": "Lakshit",
        "reply": "Chal Jahil!!",
        "created_at": "2025-04-04T01:51:17.833502"
    }
}

Edit Reply 

http://localhost:3000/api/reviews/reply/edit (PUT)

Raw body:

{
  "reply_id": 3,
  "user_id": "68f2cc50-bb5f-4717-95b5-7e4bb7d03289",
  "reply": "😴😴",
  "is_superuser": false
}

Result:

{
    "message": "Reply edited successfully!",
    "reply": null
}

Delete Reply 

http://localhost:3000/api/reviews/reply/delete (Delete)

Raw body:

{
  "reply_id": 3,
  "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89",
  "is_superuser": true
}

Result:

{
    "message": "Reply deleted successfully!",
    "reply": null
}

See all review and reply 

http://localhost:3001/api/reviews/reviews?product_id=8 (GET)

Raw body: empty

Result:

{
    "message": "Reviews fetched successfully!",
    "reviews": [
        {
            "id": 3,
            "user_id": "68f2cc50-bb5f-4717-95b5-7e4bb7d03289",
            "product_id": 8,
            "username": "Mansi",
            "rating": 5,
            "feedback": "Amazing product!",
            "created_at": "2025-04-04T01:43:13.307769",
            "replies": [
                {
                    "id": 1,
                    "reply": "Chal Jahil!!",
                    "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
                    "username": "Lakshit",
                    "review_id": 3,
                    "created_at": "2025-04-04T01:51:17.833502",
                    "product_id": 8
                },
                {
                    "id": 2,
                    "reply": "😂😂",
                    "user_id": "68f2cc50-bb5f-4717-95b5-7e4bb7d03289",
                    "username": "Mansi",
                    "review_id": 3,
                    "created_at": "2025-04-04T01:54:05.894333",
                    "product_id": 8
                }
            ]
        },
        {
            "id": 1,
            "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
            "product_id": 8,
            "username": "Lakshit",
            "rating": 4,
            "feedback": "This is a great product!",
            "created_at": "2025-03-26T09:13:28.992372",
            "replies": []
        }
    ]
}

(cart.js)

Add Product to Cart

http://localhost:3000/api/cart/add (POST)

Raw body:

{
    "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
    "product_id": 8,
    "option_ids": [1,6],
    "quantity": 5
}

Result:

{
    "message": "Product successfully added to cart!",
    "cart_item": {
        "id": 1,
        "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
        "product_id": 8,
        "quantity": 5,
        "created_at": "2025-03-26T09:17:36.636767",
        "updated_at": "2025-03-26T09:17:36.636767"
    },
    "options": [
        1,
        6
    ]
}

Fetch Cart Items 

http://localhost:3000/api/cart/fetch (POST)

Raw body:

{
    "user_id": "a3ca8bd0-10e4-4900-9418-64d618b0e469"
}

Result:

{
    "message": "Cart items fetched successfully!",
    "cart_items": [
        {
            "id": 1,
            "product_id": 7,
            "size_id": 3,
            "quantity": 2,
            "added_at": "2025-03-18T10:58:52.618167",
            "products": {
                "id": 7,
                "price": 100,
                "title": "Jackot",
                "images": [
                    "https://sqvkozxfdnieonfbimyy.supabase.co/storage/v1/object/public/images/products/1742276638894-image (2).png"
                ],
                "description": "A stylish and comfortable Jackot",
                "stock_quantity": 500
            },
            "sizes": {
                "id": 3,
                "size_name": "Medium"
            }
        },
        {
            "id": 2,
            "product_id": 4,
            "size_id": 2,
            "quantity": 5,
            "added_at": "2025-03-18T10:59:22.779962",
            "products": {
                "id": 4,
                "price": 100,
                "title": "Pant",
                "images": [
                    "https://sqvkozxfdnieonfbimyy.supabase.co/storage/v1/object/public/images/products/1742270436629-IMG_1230 2.JPG"
                ],
                "description": "Formal",
                "stock_quantity": 500
            },
            "sizes": {
                "id": 2,
                "size_name": "Large"
            }
        }
    ]
}

Update Product Quantity in Cart

http://localhost:3001/api/cart/update-quantity (POST)

{
    "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
    "cart_id": "12",
    "quantity": 1
}

Result:

{
    "message": "Cart item updated successfully!",
    "cart_item": {
        "id": 12,
        "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
        "product_id": 2,
        "quantity": 1,
        "final_price": 60000.99,
        "created_at": "2025-04-05T07:58:18.757507",
        "updated_at": "2025-04-05T08:19:34.897"
    }
}

Delete Product from cart

http://localhost:3000/api/cart/delete (DELETE)

Raw body:

{
    "user_id": "a3ca8bd0-10e4-4900-9418-64d618b0e469",
    "cart_item_id": 5
}

Result:

{
    "message": "Product removed from cart successfully!",
    "deleted_item": {
        "id": 5,
        "user_id": "a3ca8bd0-10e4-4900-9418-64d618b0e469",
        "product_id": 4,
        "size_id": 2,
        "quantity": 5,
        "added_at": "2025-03-18T11:25:26.120726"
    }
}

Place Order 

http://localhost:3000/api/cart/place/order (POST)

Raw body:

{
    "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
    "delivery_type": "Pickup" // Pickup or Delivery
}

Result:

{
    "message": "Order placed successfully!",
    "order": {
        "id": 3,
        "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
        "order_status": "Pending",
        "created_at": "2025-03-26T09:27:20.258",
        "delivery_type": "Delivery",
        "delivery_address": "{\"phone_number\":\"1322132213\",\"address_line_1\":\"123 Main Street\",\"address_line_2\":\"Apt 4B\",\"city\":\"Toronto\",\"state\":\"Ontario\",\"country\":\"Canada\",\"postal_code\":\"M1B 2K3\"}"
    },
    "order_items": [
        {
            "order_id": 3,
            "product_id": 5,
            "title": "Teddy",
            "price": 600,
            "images": [
                "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/products/1742973704991-71++bgxzBJL._AC_SY300_SX300_.jpg"
            ],
            "options": [],
            "quantity": 1
        },
        {
            "order_id": 3,
            "product_id": 4,
            "title": "Dinner Utility",
            "price": 500,
            "images": [
                "https://vrkxxjqualipkaicqorj.supabase.co/storage/v1/object/public/images/products/1742973624766-61xZtHcsQ-L.__AC_SX300_SY300_QL70_ML2_.jpg"
            ],
            "options": [
                {
                    "id": 7,
                    "name": "Large",
                    "type_id": 2,
                    "type_name": "Size"
                }
            ],
            "quantity": 1
        }
    ]
}


(Info.js)

Get info 

http://localhost:3000/api/info/get/detailed/info (POST)

Raw body:

{
    "user_id": "30149354-f7b2-427b-a069-bf9f6cf9dc0f"
}

Result:

{
    "user": {
        "id": "30149354-f7b2-427b-a069-bf9f6cf9dc0f",
        "username": "Lucky",
        "email": "lakshitkhurana5678@gmail.com",
        "is_email_verified": false,
        "reset_password_token": null,
        "created_at": "2025-03-17T05:41:46.838988"
    },
    "reviews": [
        {
            "id": 1,
            "user_id": "30149354-f7b2-427b-a069-bf9f6cf9dc0f",
            "product_id": 6,
            "username": "Lakshit",
            "rating": 8,
            "feedback": "This is a great product!",
            "created_at": "2025-03-17T06:56:52.29069"
        }
    ],
    "replies": [],
    "messages": [
        {
            "id": 1,
            "order_id": 3,
            "sender": "30149354-f7b2-427b-a069-bf9f6cf9dc0f",
            "message": "Can you provide an estimated delivery date for this order?",
            "read_status": false,
            "created_at": "2025-03-17T06:46:14.355056"
        },
        {
            "id": 2,
            "order_id": 3,
            "sender": "38bf66c1-20f1-4540-8e1b-7fb9092ba024",
            "message": "Yes Your order will be delivered on monday.",
            "read_status": false,
            "created_at": "2025-03-17T06:46:43.775569"
        }
    ],
    "orders": [
        {
            "id": 3
        },
        {
            "id": 4
        },
        {
            "id": 2
        },
        {
            "id": 1
        }
    ]
}

update info and add new info

http://localhost:3000/api/info/add/update (POST)

Raw body:

{
    "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1",
    "phone_number": "1234567890",
    "address_line_1": "123 Main Street",
    "address_line_2": "Apt 4B",
    "city": "Toronto",
    "apartment_or_home": "Apartment",
    "state": "Ontario",
    "country": "Canada",
    "postal_code": "M1B 2K3"
}

Result:

{
    "message": "User information added successfully."
}

Fetch info

http://localhost:3000/api/info/fetch (POST)

Raw body:

{
    "user_id": "c3cabd4e-2b01-49f0-9324-fe3c0ebfe0e1" or "username": "Lakshit"
}

Result:

{
    "message": "User information fetched successfully.",
    "user_info": {
        "phone_number": "1234567890",
        "address_line_1": "123 Main Street",
        "address_line_2": "Apt 4B",
        "city": "Toronto",
        "apartment_or_home": "Apartment",
        "state": "Ontario",
        "country": "Canada",
        "postal_code": "M1B 2K3"
    }
}

Check Username is avaliable or not 

https://retail-backend-9et9.onrender.com/api/info/check-username (POST)

Raw body :

{
  "username": "testuser"
}

Result:

 {
    "isAvailable": true
}

(Typecombo.js)

Add Type Combo for product 

http://localhost:3001/api/type-combo/add (POST)

Raw Body :

{
    "product_id": 2,
    "options": [9, 12],
    "combo_price": 50000,
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89" // Replace with the actual UUID of the superuser
}

Result:

{
    "message": "Combo added successfully!",
    "combo": {
        "id": 1,
        "product_id": 2,
        "options": [
            9,
            12
        ],
        "combo_price": 50000,
        "created_at": "2025-04-05T04:53:38.468421",
        "updated_at": "2025-04-05T04:53:38.468421"
    }
}

Edit Type Combo for product

http://localhost:3001/api/type-combo/edit (PATCH)

Raw Body :

{
    "combo_id": 2,
    "product_id": 2,
    "options": [9, 12],
    "combo_price": 45000,
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89" // Replace with actual superuser UUID
}

Result:

{
    "message": "Combo updated successfully!",
    "combo": {
        "id": 2,
        "product_id": 2,
        "options": [
            9,
            12
        ],
        "combo_price": 45000,
        "created_at": "2025-04-05T04:54:19.070162",
        "updated_at": "2025-04-05T04:54:19.070162"
    }
}

Delete Type Combo for product

http://localhost:3001/api/type-combo/delete (DELETE)

Raw Body :

{
    "combo_id": 2,
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89" // Replace with actual superuser UUID
}  

Result:

{
    "combo_id": 2,
    "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89" // Replace with actual superuser UUID
}

Fetch Type Combo for product

http://localhost:3001/api/type-combo/fetch/by-product/2 (GET)

Raw body: empty

Result:

{
    "message": "Combos fetched successfully for product ID: 2",
    "combos": [
        {
            "id": 1,
            "product_id": 2,
            "options": [
                9,
                12
            ],
            "combo_price": 50000,
            "created_at": "2025-04-05T04:53:38.468421",
            "updated_at": "2025-04-05T04:53:38.468421"
        },
        {
            "id": 3,
            "product_id": 2,
            "options": [
                10,
                12
            ],
            "combo_price": 60000,
            "created_at": "2025-04-05T04:54:34.071246",
            "updated_at": "2025-04-05T04:54:34.071246"
        },
        {
            "id": 4,
            "product_id": 2,
            "options": [
                9,
                13
            ],
            "combo_price": 60000,
            "created_at": "2025-04-05T04:54:40.211638",
            "updated_at": "2025-04-05T04:54:40.211638"
        }
    ]
}

Fetch all Type Combo

http://localhost:3001/api/type-combo/fetch/all (GET)

Raw body: empty

Result:

{
    "message": "All combos fetched successfully!",
    "combos": [
        {
            "id": 1,
            "product_id": 2,
            "options": [
                9,
                12
            ],
            "combo_price": 50000,
            "created_at": "2025-04-05T04:53:38.468421",
            "updated_at": "2025-04-05T04:53:38.468421"
        },
        {
            "id": 2,
            "product_id": 2,
            "options": [
                10,
                12
            ],
            "combo_price": 60000,
            "created_at": "2025-04-05T04:54:34.071246",
            "updated_at": "2025-04-05T04:54:34.071246"
        },
        {
            "id": 3,
            "product_id": 2,
            "options": [
                9,
                13
            ],
            "combo_price": 60000,
            "created_at": "2025-04-05T04:54:40.211638",
            "updated_at": "2025-04-05T04:54:40.211638"
        }
    ]
}

Fetch Price of Type Combo

http://localhost:3001/api/type-combo/fetch/price (POST)

Raw body:

{
    "product_id": 2,
    "options": [9, 12]
}

Result:

{
    "message": "Combo price fetched successfully!",
    "combo_price": 60000
}

(Report.js)

Get Detailed Report

http://localhost:3000/api/report/report (POST)

Raw Body:

{
  "period": "month", month or year
  "value": "April 2025", or "2025"
  "user_id": "8171d544-991c-4d58-bf57-dddca2c4ab89"
}

Result:

{
    "message": "Report sent successfully to the superuser email."
}

(Feedback.js)

Submit Feedback

http://localhost:3000/api/contact/contact (POST)

Raw body:

{
  "user_id": "123e4567-e89b-12d3-a456-426614174000",
  "name": "John Doe",
  "email": "john.doe@example.com",
  "message": "This is a sample feedback message!"
}

Result:

{
    "message": "Feedback submitted successfully!"
}

Fetch all Feedback

http://localhost:3000/api/contact/feedbacks (GET)

Raw body: empty

Result:

{
    "feedbacks": [
        {
            "id": 1,
            "user_id": "6ea48e50-4004-4555-b063-fc4bad795904",
            "name": "Lakshit",
            "email": "lakshitkhurana5678@gmail.com",
            "message": "I want superuser access.",
            "created_at": "2025-04-23T09:07:54.360353+00:00"
        }
    ]
}

(blockedIps.js)

Fetch all blocked IPs

http://localhost:3000/api/admin/blocked-ips (GET)

Raw body: empty

Result:

[
  {
    "id": 1,
    "ip": "192.168.0.1",
    "request_count": 150,
    "first_request": "2025-04-27T07:30:00.000Z",
    "last_request": "2025-04-27T07:31:00.000Z",
    "block_start": "2025-04-27T07:31:05.000Z",
    "block_end": "2025-04-27T07:36:05.000Z",
    "route": "/api/categories/list",
    "created_at": "2025-04-27T07:31:05.000Z"
  },
  {
    "id": 2,
    "ip": "203.0.113.5",
    "request_count": 300,
    "first_request": "2025-04-27T07:35:00.000Z",
    "last_request": "2025-04-27T07:36:00.000Z",
    "block_start": "2025-04-27T07:36:10.000Z",
    "block_end": "2025-04-27T07:46:10.000Z",
    "route": "/api/superusers/info",
    "created_at": "2025-04-27T07:36:10.000Z"
  }
]

--------------------------------------------------------------------------------------------------
Great mindset! Debugging is a skill that improves with practice, and understanding the **thought process** behind it is key. Here’s a breakdown of how I debugged your issue and how you can approach similar problems in the future.

---

### 🔍 **Debugging Steps I Used**
#### **1️⃣ Understand the Symptoms (What’s Wrong?)**
- You mentioned that the time was **always 4 hours behind**.
- The **"seconds ago" part worked**, but **minutes and hours were incorrect**.
- You showed SQL results where timestamps were being stored **in UTC** but displayed differently in New York time.

#### **2️⃣ Identify the Root Cause (Why Is It Wrong?)**
- The database stores timestamps in **UTC**.
- The frontend was treating the UTC timestamp **as if it were in local time**, causing incorrect calculations.
- You manually tried adding/subtracting `14400` (4 hours), but that was a **hardcoded** fix instead of a real conversion.

#### **3️⃣ Test and Validate Assumptions**
- I asked you to compare the database values:  
  ```sql
  SELECT created_at AT TIME ZONE 'America/New_York' AS local_time FROM public.replies;
  ```
  - This showed the time difference clearly.
- I suggested logging timestamps in JavaScript:
  ```javascript
  console.log("Original UTC Timestamp:", new Date(timestamp).toISOString());
  console.log("Converted Local Time:", replyLocal.toISOString());
  ```
  - This confirmed that the issue was in **how JavaScript was interpreting UTC timestamps**.

#### **4️⃣ Implement the Correct Fix**
- Instead of a fixed `14400` offset, I **converted the timestamp properly** using:
  ```javascript
  const replyLocal = new Date(replyDate.getTime() - replyDate.getTimezoneOffset() * 60000);
  ```
  - `getTimezoneOffset()` dynamically adjusts for the user's timezone.
  - Now the time was displayed correctly **without hardcoding offsets**.

---

### 🚀 **Key Lessons for Future Debugging**
1️⃣ **Reproduce the issue**  
   - Identify exactly when and how it happens.  
   - Compare expected vs. actual results.

2️⃣ **Check data at every stage**  
   - Is the **database saving timestamps correctly**?  
   - Is the **frontend interpreting the time correctly**?  
   - Use `console.log()` or `SELECT` queries to confirm.

3️⃣ **Use built-in timezone functions**  
   - In JavaScript, `Date` objects are stored in UTC but displayed in local time.  
   - `getTimezoneOffset()` helps adjust for this dynamically.

4️⃣ **Avoid hardcoded fixes**  
   - The `14400` (4-hour offset) might work for some cases, but it’s not a universal fix.  
   - Always prefer **dynamic** timezone conversion.

5️⃣ **Use logging strategically**  
   - Console logs for debugging (`console.log(timestamp)`).  
   - SQL queries to check database values.

---

### 🎯 **Next Time You Face a Similar Issue**
1. **Check how timestamps are stored** (UTC? Local?)  
2. **Log timestamps at each stage** (database, backend, frontend).  
3. **Compare UTC vs. local conversions** (use SQL or `getTimezoneOffset()`).  
4. **Use the correct built-in conversion method** instead of hardcoding.  
5. **Test with different timezones** (especially if the app has users in multiple locations).

---

💡 **Final Tip:** If debugging gets tricky, **explain the problem out loud or to someone else**—it often helps you realize what’s wrong!

Hope this helps, bro! Next time you run into a bug, you’ll crush it even faster. 🚀🔥

so use this fucntion 

const formatTimeDifference = (timestamp) => {
    const now = new Date();
    const replyDate = new Date(timestamp);

    // Convert to local time
    const replyLocal = new Date(replyDate.getTime() - replyDate.getTimezoneOffset() * 60000);

    const differenceInSeconds = Math.floor((now - replyLocal) / 1000);

    if (differenceInSeconds < 60) {
        return `${differenceInSeconds} second${differenceInSeconds !== 1 ? 's' : ''} ago`;
    } else if (differenceInSeconds < 3600) {
        const minutes = Math.floor(differenceInSeconds / 60);
        return `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;
    } else if (differenceInSeconds < 86400) {
        const hours = Math.floor(differenceInSeconds / 3600);
        return `${hours} hour${hours !== 1 ? 's' : ''} ago`;
    } else if (differenceInSeconds < 2592000) {
        const days = Math.floor(differenceInSeconds / 86400);
        return `${days} day${days !== 1 ? 's' : ''} ago`;
    } else if (differenceInSeconds < 31536000) {
        const months = Math.floor(differenceInSeconds / 2592000);
        return `${months} month${months !== 1 ? 's' : ''} ago`;
    } else {
        const years = Math.floor(differenceInSeconds / 31536000);
        return `${years} year${years !== 1 ? 's' : ''} ago`;
    }
};
 
tried and Tested 

Source of this file - Trust Me Bro 
